plugins {
    id 'java'
    id 'org.springframework.boot' version '3.4.5'
    id 'io.spring.dependency-management' version '1.1.6'
    id 'org.jetbrains.kotlin.plugin.spring' version '2.1.20'
    id 'jacoco'
}

group = 'org.hyeonqz'
version = '1.0.0'
sourceCompatibility = '21'

repositories {
    mavenCentral()
}

jacocoTestReport {
    reports {
        xml.required = true
        html.required = true
    }
}


bootJar {
    enabled = false
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-gradle-plugin:3.4.5'

    testImplementation platform('org.junit:junit-bom:5.10.0')
    testImplementation 'org.junit.jupiter:junit-jupiter'
}

subprojects {
    apply plugin: 'java'
    apply plugin: 'org.springframework.boot'
    apply plugin: 'io.spring.dependency-management'

    sourceCompatibility = '21'

    springBoot {
        buildInfo()
    }

    // sub module 공통 dependency
    dependencies {
        // springboot
        implementation 'org.springframework.boot:spring-boot-starter'
        implementation 'org.springframework.boot:spring-boot-starter-web'

        // jpa
        implementation 'org.springframework.boot:spring-boot-starter-data-jpa'

        // aop
        implementation 'org.springframework.boot:spring-boot-starter-aop'

        // validation
        implementation 'org.springframework.boot:spring-boot-starter-validation'

        // lombok
        compileOnly 'org.projectlombok:lombok'
        annotationProcessor 'org.projectlombok:lombok'

        // mysql
        implementation 'mysql:mysql-connector-java:8.0.32'

        // springboot test
        testImplementation 'org.springframework.boot:spring-boot-starter-test'

        // kotlin
        implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8:2.1.20"

        // kotlin test
        testImplementation "org.jetbrains.kotlin:kotlin-test:2.1.20"
        // mockito-kotlin 대신 SpringMockK 사용 가능
        testImplementation "com.ninja-squad:springmockk:4.0.2"
    }

    test {
        useJUnitPlatform()
    }

}

project(':module-api') {
    dependencies {
        implementation project(':module-core')
    }
}

project(':module-external') {
    dependencies {
        implementation project(':module-common')
    }
}

project(':module-batch') {
    dependencies {
        implementation project(':module-core')
        implementation project(':module-common')
    }
}

project(':module-common') {
    dependencies {
    }
}